[gd_scene load_steps=12 format=3 uid="uid://wgg82lmuk14g"]

[ext_resource type="PackedScene" uid="uid://i400fcrrcxnd" path="res://Prefabs/SeaGrass.tscn" id="1_biuwl"]
[ext_resource type="Texture2D" uid="uid://dyba00jcv4wrv" path="res://Assets/Sprites/Decoration/sea grass.png" id="2_pu0rq"]

[sub_resource type="Shader" id="Shader_gh0ba"]
code = "// original wind shader from https://github.com/Maujoe/godot-simple-wind-shader-2d/tree/master/assets/maujoe.simple_wind_shader_2d
// original script modified by HungryProton so that the assets are moving differently : https://pastebin.com/VL3AfV8D
//
// speed - The speed of the wind movement.
// minStrength - The minimal strength of the wind movement.
// maxStrength - The maximal strength of the wind movement.
// strengthScale - Scalefactor for the wind strength.
// interval - The time between minimal and maximal strength changes.
// detail - The detail (number of waves) of the wind movement.
// distortion - The strength of geometry distortion.
// heightOffset - The height where the wind begins to move. By default 0.0.

shader_type spatial;
render_mode cull_disabled;

uniform sampler2D albedo: source_color, filter_nearest;
// Wind settings.
uniform float frames = 1.0;
uniform float frame = 0;
uniform float speed = 1.0;
uniform float minStrength : hint_range(0.0, 1.0) = 0.05;
uniform float maxStrength : hint_range(0.0, 1.0) = 0.01;
uniform float strengthScale = 100.0;
uniform float interval = 3.5;
uniform float detail = 1.0;
uniform float distortion : hint_range(0.0, 1.0);
uniform float heightOffset : hint_range(0.0, 1.0);

// With the offset value, you can if you want different moves for each asset. Just put a random value (1, 2, 3) in the editor. Don't forget to mark the material as unique if you use this
uniform float offset = 0; 


float getWind(vec2 vertex, vec2 uv, float time){
    float diff = pow(maxStrength - minStrength, 2.0);
    float strength = clamp(minStrength + diff + sin(time / interval) * diff, minStrength, maxStrength) * strengthScale;
    float wind = (sin(time) + cos(time * detail)) * strength * max(0.0, (1.0-uv.y) - heightOffset);
    
    return wind; 
}

void fragment(){
	ALBEDO = texture(albedo,UV*vec2(1.0/frames,1.0)+vec2(frame*0.3,0)).rgb;
	ALPHA = texture(albedo,UV*vec2(1.0/frames,1.0)+vec2(frame*0.3,0)).a;
}

void vertex() {
    vec4 pos = MODEL_MATRIX * vec4(0.0, 0.0, 0.0, 1.0);
    float time = TIME * speed + offset;
    //float time = TIME * speed + pos.x * pos.y  ; not working when moving...
    VERTEX.x += getWind(VERTEX.xy, UV, time);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_asdb2"]
render_priority = 0
shader = SubResource("Shader_gh0ba")
shader_parameter/frames = 3.0
shader_parameter/frame = 0.0
shader_parameter/speed = 1.0
shader_parameter/minStrength = 0.05
shader_parameter/maxStrength = 0.01
shader_parameter/strengthScale = 3.5
shader_parameter/interval = 3.5
shader_parameter/detail = 1.0
shader_parameter/distortion = 1.0
shader_parameter/heightOffset = 0.5
shader_parameter/offset = 0.0
shader_parameter/albedo = ExtResource("2_pu0rq")

[sub_resource type="PlaneMesh" id="PlaneMesh_jy3m4"]
material = SubResource("ShaderMaterial_asdb2")
size = Vector2(0.5, 1)
subdivide_width = 5
orientation = 2

[sub_resource type="Shader" id="Shader_x8dvy"]
code = "// original wind shader from https://github.com/Maujoe/godot-simple-wind-shader-2d/tree/master/assets/maujoe.simple_wind_shader_2d
// original script modified by HungryProton so that the assets are moving differently : https://pastebin.com/VL3AfV8D
//
// speed - The speed of the wind movement.
// minStrength - The minimal strength of the wind movement.
// maxStrength - The maximal strength of the wind movement.
// strengthScale - Scalefactor for the wind strength.
// interval - The time between minimal and maximal strength changes.
// detail - The detail (number of waves) of the wind movement.
// distortion - The strength of geometry distortion.
// heightOffset - The height where the wind begins to move. By default 0.0.

shader_type spatial;
render_mode cull_disabled;

uniform sampler2D albedo: source_color, filter_nearest;
// Wind settings.
uniform float frames = 1.0;
uniform float frame = 0;
uniform float speed = 1.0;
uniform float minStrength : hint_range(0.0, 1.0) = 0.05;
uniform float maxStrength : hint_range(0.0, 1.0) = 0.01;
uniform float strengthScale = 100.0;
uniform float interval = 3.5;
uniform float detail = 1.0;
uniform float distortion : hint_range(0.0, 1.0);
uniform float heightOffset : hint_range(0.0, 1.0);

// With the offset value, you can if you want different moves for each asset. Just put a random value (1, 2, 3) in the editor. Don't forget to mark the material as unique if you use this
uniform float offset = 0; 


float getWind(vec2 vertex, vec2 uv, float time){
    float diff = pow(maxStrength - minStrength, 2.0);
    float strength = clamp(minStrength + diff + sin(time / interval) * diff, minStrength, maxStrength) * strengthScale;
    float wind = (sin(time) + cos(time * detail)) * strength * max(0.0, (1.0-uv.y) - heightOffset);
    
    return wind; 
}

void fragment(){
	ALBEDO = texture(albedo,UV*vec2(1.0/frames,1.0)+vec2(frame*0.3,0)).rgb;
	ALPHA = texture(albedo,UV*vec2(1.0/frames,1.0)+vec2(frame*0.3,0)).a;
}

void vertex() {
    vec4 pos = MODEL_MATRIX * vec4(0.0, 0.0, 0.0, 1.0);
    float time = TIME * speed + offset;
    //float time = TIME * speed + pos.x * pos.y  ; not working when moving...
    VERTEX.x += getWind(VERTEX.xy, UV, time);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_akibm"]
render_priority = 0
shader = SubResource("Shader_x8dvy")
shader_parameter/frames = 3.0
shader_parameter/frame = 1.0
shader_parameter/speed = 1.0
shader_parameter/minStrength = 0.05
shader_parameter/maxStrength = 0.01
shader_parameter/strengthScale = 3.5
shader_parameter/interval = 3.5
shader_parameter/detail = 1.0
shader_parameter/distortion = 1.0
shader_parameter/heightOffset = 0.5
shader_parameter/offset = 1.0
shader_parameter/albedo = ExtResource("2_pu0rq")

[sub_resource type="PlaneMesh" id="PlaneMesh_kxoms"]
material = SubResource("ShaderMaterial_akibm")
size = Vector2(0.5, 1)
subdivide_width = 5
orientation = 2

[sub_resource type="Shader" id="Shader_tcrb3"]
code = "// original wind shader from https://github.com/Maujoe/godot-simple-wind-shader-2d/tree/master/assets/maujoe.simple_wind_shader_2d
// original script modified by HungryProton so that the assets are moving differently : https://pastebin.com/VL3AfV8D
//
// speed - The speed of the wind movement.
// minStrength - The minimal strength of the wind movement.
// maxStrength - The maximal strength of the wind movement.
// strengthScale - Scalefactor for the wind strength.
// interval - The time between minimal and maximal strength changes.
// detail - The detail (number of waves) of the wind movement.
// distortion - The strength of geometry distortion.
// heightOffset - The height where the wind begins to move. By default 0.0.

shader_type spatial;
render_mode cull_disabled;

uniform sampler2D albedo: source_color, filter_nearest;
// Wind settings.
uniform float frames = 1.0;
uniform float frame = 0;
uniform float speed = 1.0;
uniform float minStrength : hint_range(0.0, 1.0) = 0.05;
uniform float maxStrength : hint_range(0.0, 1.0) = 0.01;
uniform float strengthScale = 100.0;
uniform float interval = 3.5;
uniform float detail = 1.0;
uniform float distortion : hint_range(0.0, 1.0);
uniform float heightOffset : hint_range(0.0, 1.0);

// With the offset value, you can if you want different moves for each asset. Just put a random value (1, 2, 3) in the editor. Don't forget to mark the material as unique if you use this
uniform float offset = 0; 


float getWind(vec2 vertex, vec2 uv, float time){
    float diff = pow(maxStrength - minStrength, 2.0);
    float strength = clamp(minStrength + diff + sin(time / interval) * diff, minStrength, maxStrength) * strengthScale;
    float wind = (sin(time) + cos(time * detail)) * strength * max(0.0, (1.0-uv.y) - heightOffset);
    
    return wind; 
}

void fragment(){
	ALBEDO = texture(albedo,UV*vec2(1.0/frames,1.0)+vec2(frame*0.3,0)).rgb;
	ALPHA = texture(albedo,UV*vec2(1.0/frames,1.0)+vec2(frame*0.3,0)).a;
}

void vertex() {
    vec4 pos = MODEL_MATRIX * vec4(0.0, 0.0, 0.0, 1.0);
    float time = TIME * speed + offset;
    //float time = TIME * speed + pos.x * pos.y  ; not working when moving...
    VERTEX.x += getWind(VERTEX.xy, UV, time);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_mnm36"]
render_priority = 0
shader = SubResource("Shader_tcrb3")
shader_parameter/frames = 3.0
shader_parameter/frame = 2.0
shader_parameter/speed = 1.0
shader_parameter/minStrength = 0.05
shader_parameter/maxStrength = 0.01
shader_parameter/strengthScale = 3.5
shader_parameter/interval = 3.5
shader_parameter/detail = 1.0
shader_parameter/distortion = 1.0
shader_parameter/heightOffset = 0.5
shader_parameter/offset = 3.0
shader_parameter/albedo = ExtResource("2_pu0rq")

[sub_resource type="PlaneMesh" id="PlaneMesh_vhour"]
material = SubResource("ShaderMaterial_mnm36")
size = Vector2(0.5, 1)
subdivide_width = 5
orientation = 2

[node name="SeaGrass" instance=ExtResource("1_biuwl")]
transform = Transform3D(0.35, 0, 0, 0, 0.35, 0, 0, 0, 0.35, 0, 0, 0)

[node name="SG1" parent="." index="0"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0)

[node name="SG4" type="MeshInstance3D" parent="." index="1"]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 0, 0.5, 0)
mesh = SubResource("PlaneMesh_jy3m4")

[node name="SG2" parent="." index="2"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0)

[node name="SG5" type="MeshInstance3D" parent="." index="3"]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 0, 0.5, 0)
mesh = SubResource("PlaneMesh_kxoms")

[node name="SG3" parent="." index="4"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0)

[node name="SG6" type="MeshInstance3D" parent="." index="5"]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 0, 0.5, 0)
mesh = SubResource("PlaneMesh_vhour")
